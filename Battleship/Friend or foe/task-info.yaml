type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Field.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Field {

      private String[][] playField;

      private final String[] alphabet = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J"};


      public void initializeField(int x, int y) {
        playField = new String[x][y];
        for (String[] strings : playField) {
          Arrays.fill(strings, "~");
        }
      }

      public void printField() {
        System.out.print("  1 2 3 4 5 6 7 8 9 10\n");

        for (int row = 0; row < playField.length; row++) {
          System.out.print(alphabet[row] + " ");
          for (int col = 0; col < playField[row].length; col++) {
            System.out.print(playField[row][col] + " ");
          }
          System.out.println();

        }
        System.out.println();
      }

      public void placeShip(Ship ship) {
        System.out.printf("Enter the coordinates of the %s (%d cells):%n", ship.getType(),
            ship.getSize());
        Scanner input = new Scanner(System.in);

        boolean placed = false;
        while (true) {
          String userInput = input.nextLine();
          System.out.println();

          // Split coordinates and implement ship placement in play field
          String[] coords = userInput.split(" ");

          int[] start = new int[2];
          int[] end = new int[2];
          start[0] = Arrays.asList(alphabet).indexOf(String.valueOf(coords[0].charAt(0)));
          if (coords[0].length() == 3) {
            start[1] = Integer.parseInt(coords[0].substring(1, 3)) - 1;
          } else {
            start[1] = Integer.parseInt(String.valueOf(coords[0].charAt(1))) - 1;
          }

          end[0] = Arrays.asList(alphabet).indexOf(String.valueOf(coords[1].charAt(0)));
          if (coords[1].length() == 3) {
            end[1] = Integer.parseInt(coords[1].substring(1, 3)) - 1;
          } else {
            end[1] = Integer.parseInt(String.valueOf(coords[1].charAt(1))) - 1;
          }

          // execute 2 times switch start and end at the end to check for both combinations
          for (int x = 0; x < 2; x++) {

            try {
              placed = placeShipAt(ship, start, end);
            } catch (Exception e) {
              System.out.println("Error! You placed it too close to another one. Try again:");
            }

            // exit loop is ship was successfully placed!
            if (placed) {
              return;
            }

            // swap start and end array to check both combinations
            int[] temp;
            temp = start;
            start = end;
            end = temp;
          }
          System.out.println("Error! Wrong ship location! Try again:");
        }
      }

      private boolean placeShipAt(Ship ship, int[] start, int[] end) throws Exception {
        boolean placed = false;
        int size;

        if (start[0] == end[0] && Math.abs(end[1] - start[1]) + 1 == ship.getSize()) {
          size = (end[1] - start[1]) + 1;

          /* check if field is empty horizontal
             check if neighbors are empty as well
           */
          for (int i = 0; i < size; i++) {

            for (int dr = -1; dr <= 1; dr++) {
              for (int dc = -1; dc <= 1; dc++) {
                int nr = start[0] + dr;
                int nc = start[1] + i + dc;

                if(accessInvalid(nr, nc)) {
                  continue;
                }
                if (playField[nr][nc].equals("O")) {
                  throw new Exception("Place occupied!");
                }
              }
            }
          }

          // place ship horizontal
          for (int i = 0; i < size; i++) {
            playField[start[0]][start[1] + i] = "O";
            placed = true;
            ship.setStart(start);
            ship.setEnd(end);
            ship.setHorizontal(true);
          }

        } else if (start[1] == end[1] && Math.abs(end[0] - start[0]) + 1 == ship.getSize()) {
          size = Math.abs(end[0] - start[0]) + 1;
          // check if field is empty vertical
          for (int i = 0; i < size; i++) {
            for (int dr = -1; dr <= 1; dr++) {
              for (int dc = -1; dc <= 1; dc++) {
                int nr = start[0] + i + dr;
                int nc = start[1] + dc;

                if(accessInvalid(nr, nc)) {
                  continue;
                }
                if (playField[nr][nc].equals("O")) {
                  throw new Exception("Place occupied!");
                }
              }
            }
          }

          for (int i = 0; i < size; i++) {
            playField[start[0] + i][start[1]] = "O";
            placed = true;
            ship.setStart(start);
            ship.setEnd(end);
            ship.setHorizontal(false);
          }

        }
        return placed;
      }

      private boolean accessInvalid(int nr, int nc) {
        return nr < 0 || nc < 0 || nr >= playField.length || nc >= playField.length;
      }

      public String[][] getField() {
        return this.playField;
      }

      public void shoot(Field outputField) {
        String[][] outputFieldArray = outputField.getField();
        Scanner input = new Scanner(System.in);
        System.out.println("Take a shot!");

        while (Game.shipsAlive()) {
          String userInput = input.nextLine();

          int[] target = new int[2];
          target[0] = Arrays.asList(alphabet).indexOf(String.valueOf(userInput.charAt(0)));

          if (userInput.length() == 3) {
            target[1] = Integer.parseInt(userInput.substring(1, 3)) - 1;
          } else {
            target[1] = Integer.parseInt(String.valueOf(userInput.charAt(1))) - 1;
          }

          try {

            if (playField[target[0]][target[1]].equals("O") || playField[target[0]][target[1]].equals("X") ) {
              playField[target[0]][target[1]] = "X";
              outputFieldArray[target[0]][target[1]] = "X";
              outputField.printField();

              Ship hitShip = Game.getHitShip(target);
              if (hitShip != null && hitShip.isSunk(this)) {
                System.out.println("You sank a ship! Specify a new target:");
              }else{
                System.out.println("You hit a ship!");
              }
              printField();
            } else {
              playField[target[0]][target[1]] = "M";
              outputFieldArray[target[0]][target[1]] = "M";
              outputField.printField();
              System.out.println("You missed!");
              printField();
            }

          } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error! You entered the wrong coordinates! Try again:");
          }


        }

        System.out.println("You sank the last ship. You won. Congratulations!");
      }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |+
    package battleship;

    public class Ship {

      boolean horizontal;
      private int size;
      private int[] start;
      private int[] end;
      private String type;

      public Ship(int size, String type) {
        this.size = size;
        this.type = type;
        start = new int[2];
        end = new int[2];
      }

      public int getSize() {
        return size;
      }

      public void setSize(int size) {
        this.size = size;
      }

      public boolean isHorizontal() {
        return horizontal;
      }

      public void setHorizontal(boolean horizontal) {
        this.horizontal = horizontal;
      }

      public String getType() {
        return type;
      }

      public void setType(String type) {
        this.type = type;
      }

      public int[] getStart() {
        return start;
      }

      public void setStart(int[] start) {
        this.start = start;
      }

      public int[] getEnd() {
        return end;
      }

      public void setEnd(int[] end) {
        this.end = end;
      }


      public boolean isSunk(Field playField) {
        String[][] playFieldArray = playField.getField();
        if (this.isHorizontal()) {
          for (int i = 0; i < size; i++) {
            if (playFieldArray[start[0]][start[1] + i].equals("O")) {
              return false;
            }
          }
        } else {
          for (int i = 0; i < size; i++) {
            if (playFieldArray[start[0] + i][start[1]].equals("O")) {
              return false;
            }
          }
        }
        return true;


      }

      public boolean checkHitBox(int[] target, Field playField) {
        String[][] playFieldArray = playField.getField();
        if (this.isHorizontal()) {
          for (int i = 0; i < size; i++) {
            if (start[0] == target[0] && start[1] + i == target[1]) {
              return true;
            }
          }
        } else {
          for (int i = 0; i < size; i++) {
            if (start[0] + 1 == target[0] && start[1] == target[1]) {
              return true;
            }
          }
        }
        return false;
      }
    }

  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;

    public class Game {
        private static Field playField;

        private Field outputField;
        private static ArrayList<Ship> ships;

        public Game() {
            playField = new Field();
            this.outputField = new Field();
            ships = new ArrayList<>();
        }

        public static boolean shipsAlive() {
            for(Ship current : ships) {
                if(!current.isSunk(playField)) {
                    return true;
                }

            }
            return false;
        }

        public void initializeGame() {
            playField.initializeField(10,10);
            outputField.initializeField(10,10);
            Ship carrier = new Ship(5, "Aircraft Carrier");
            ships.add(carrier);
            Ship battleship = new Ship(4, "Battleship");
            ships.add(battleship);
            Ship submarine = new Ship(3, "Submarine");
            ships.add(submarine);
            Ship cruiser = new Ship(3, "Cruiser");
            ships.add(cruiser);
            Ship destroyer = new Ship(2, "Destroyer");
            ships.add(destroyer);

        }

        public void play() {
            playField.printField();
            for(Ship ship : ships) {
                playField.placeShip(ship);
                playField.printField();

            }
            System.out.println("\nThe game starts!");
            outputField.printField();
            playField.shoot(outputField);
        }

        public static Ship getHitShip(int[] target) {
            for(Ship current : ships) {
                if(current.checkHitBox(target, playField)) {
                    return current;
                }
            }
            return null;
        }

    }
  learner_created: true
- name: src/battleship/Player.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 28 Sep 2022 16:52:55 UTC
record: -1
